<?php

/**
 * Implements hook_menu().
 */
function intercomio_menu() {
  $items = array();

  $items['admin/config/services/intercomio'] = array(
    'title' => t('Intercom.io Configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intercomio_admin_form'),
    'access arguments' => array('administer intercomio'),
    'file' => 'intercomio.admin.inc',
  );

  $items['admin/config/services/intercomio/config'] = array(
    'title' => 'Configuration',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/services/intercomio/mapping'] = array(
    'title' => t('Field Mapping'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intercomio_mapping_admin_form'),
    'access arguments' => array('administer intercomio'),
    'file' => 'intercomio.admin.inc',
  );

  $items['admin/config/services/intercomio/events'] = array(
    'title' => t('Events'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intercomio_events_admin_form'),
    'access arguments' => array('administer intercomio'),
    'file' => 'intercomio.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function intercomio_permission() {
  return array(
    'administer intercomio' => array(
      'title' => t('Administer Intercom.io'),
      'description' => t('Perform administration tasks for Intercom.io module.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function intercomio_theme($existing, $type, $theme, $path) {
  return array(
    'intercomio_mapping_table' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme function for field mappings table.
 */
function theme_intercomio_mapping_table($vars) {
  $element = $vars['element'];

  $header = array(
    'label' => t('Field'),
    'mapping' => t('Intercom.io Mapping'),
  );

  $rows = array();
  foreach (element_children($element) as $key) {
    $row = array();

    $row['data'] = array();
    foreach ($header as $fieldname => $title) {
      $row['data'][] = drupal_render($element[$key][$fieldname]);
    }
    $rows[] = $row;
  }

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => drupal_html_id('intercomio_mapping_table')),
  ));
}

/**
 * Implements hook_page_alter().
 *
 * Inserts JavaScript to the appropriate scope/region of the page.
 */
function intercomio_page_alter(&$page) {
  global $user;
  if ($user->uid && ($app_id = variable_get('intercomio_app_id', '')) && variable_get('intercomio_enabled', TRUE)) {
    $roles = variable_get('intercomio_roles', array());
    $match = FALSE;
    $roles = array_filter($roles);
    if (!empty($roles)) {
      foreach ($roles as $rid) {
        if (in_array($rid, array_keys($user->roles))) {
          $match = TRUE;
          break;
        }
      }

      if (variable_get('intercomio_visibility_roles')) {
        $track = !$match;
      }
      else {
        $track = $match;
      }
    }
    else {
      $track = TRUE;
    }

    if ($track) {
      $page[variable_get('intercomio_region', 'content')]['intercomio'] = array(
        '#markup' => _intercomio_get_script($user, $app_id),
      );
      drupal_add_js(drupal_get_path('module', 'intercomio') . '/intercomio.js');
    }
  }
}

/**
 * Implements hook_init().
 */
function intercomio_init() {
  global $user;
  if (!empty($user->uid) // only for logged in users
      && variable_get('intercomio_app_id', '') // app id is set up
      && variable_get('intercomio_enabled', '') // intercomio tracking is enabled
  ) {
    // Trigger page load events
    foreach(_intercomio_get_key_value_events('page_load') as $event_name => $paths) {
      if (in_array($_GET['q'], $paths)) {
        drupal_register_shutdown_function('intercomio_track_event', $event_name);
      }
    }

    // If this is a node page, parse events attached to the node type
    if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
      $node = menu_get_object();
      $type = $node->type;
      foreach(_intercomio_get_line_events($type . '_view') as $event_name) {
        $event_name = token_replace($event_name, array('node' => $node));
        drupal_register_shutdown_function('intercomio_track_event', $event_name);
      }
    }

    // Attach link events
    $events_data = array();
    foreach(_intercomio_get_key_value_events('link_click') as $event_name => $urls) {
      foreach($urls as $url) {
        $events_data[] = array(
          'event_name' => $event_name,
          'url' => strpos($url, 'http') === 0 ? $url : url($url),
        );
      }
    }
    if (count($events_data)) {
      drupal_add_js(array('intercomio' => array('link_events' => $events_data)), 'setting');
    }
  }
}

/**
 * Implements hook_intercomio_custom_data_info().
 */
function intercomio_intercomio_custom_data_info() {
  $data = array();
  foreach (user_roles(TRUE) as $rid => $role) {
    if ($role == 'authenticated user') continue;
    $data['role_' . str_replace(' ', '_', $role)] = t('Send membership information for role %role', array('%role' => $role));
  }
  return $data;
}

/**
 * Implements hook_intercomio_custom_data().
 */
function intercomio_intercomio_custom_data($keys, $account) {
  $data = array();
  foreach (user_roles(TRUE) as $rid => $role) {
    foreach ($keys as $key) {
      if ($key === 'role_' . str_replace(' ', '_', $role)) {
        $data[$key] = in_array($rid, array_keys($account->roles));
      }
    }
  }

  $mappings = variable_get('intercomio_mapping', array());
  $account_wrapper = new EntityDrupalWrapper('user', $account->uid);
  foreach ($mappings as $id => $mapping) {
    if (!empty($mapping) && isset($account_wrapper->{$id})) {
      $field_wrapper = $account_wrapper->{$id};
      $value = $account_wrapper->{$id}->value();
      if (!is_array($value)) {
        $value = array($value);
      }
      // Currently, we support support just strings, numbers, boolean values and
      // objects with a field called 'name'.
      $intercomio_data = array();
      foreach ($value as $key => $val) {
        // For date fields, we convert them back to dates.
        if ($field_wrapper->type() == 'date' && !is_null($val)) {
          $val = format_date($val, 'custom', 'Y-m-d H:i:s');
          // If the last part of the date is -01-01 00:00:00 then we consider
          // only the year.
          if (strpos($val, '-01-01 00:00:00') === 4) {
            $val = substr($val, 0, 4);
          }
        }
        if (is_string($val) || is_numeric($val) || is_bool($val)) {
          $intercomio_data[] = $val;
          continue;
        }
        if (is_object($val) && !empty($val->name)) {
          $intercomio_data[] = $val->name;
          continue;
        }
      }
      $data[$mapping['mapping']] = implode('&&', $intercomio_data);
    }
  }

  return $data;
}

/**
 * Get custom data settings.
 *
 * @see hook_intercomio_custom_data_info
 * @see hook_intercomio_custom_data
 */
function intercomio_custom_data_settings() {
  $custom_data = array();
  foreach (module_implements('intercomio_custom_data_info') as $module) {
    foreach (module_invoke($module, 'intercomio_custom_data_info') as $key => $label) {
      $custom_data[$key] = $label;
    }
  }
  return $custom_data;
}

/**
 * Implements hook_user_delete().
 */
function intercomio_user_delete($account) {
  // When deleting an user, we also want to remove it from intercom.
  // There is also a PHP library for intercom here
  // https://developers.intercom.io/reference#sdks-client-libraries but it is
  // just too much for what we need. We will just use a plain curl request.
  try {
    $access_token = variable_get('intercomio_access_token', '');
    $curl_options = array(
      CURLOPT_URL => 'https://api.intercom.io/users?email=' . urlencode($account->mail),
      CURLOPT_CUSTOMREQUEST => 'DELETE',
      CURLOPT_TIMEOUT => 1, // do not more than 1 sec to connect
      CURLOPT_HTTPHEADER => array("Accept: application/json", "Authorization:Bearer " . $access_token),
      CURLOPT_RETURNTRANSFER => TRUE,
    );
    $curl = curl_init();
    curl_setopt_array($curl, $curl_options);
    if (!$result = curl_exec($curl)) {
      $args = array(
        '@errno' => curl_errno($curl),
        '@error' => curl_error($curl),
        '@mail' => $account->mail,
      );
      throw new \Exception(t('Failed to delete the user @mail on Intercom.io side with error #@errno: @error', $args));
    }
    ob_start();
    echo '<pre>';
    print_r(json_decode($result));
    $output = ob_get_clean();
    watchdog('intercom', "Deleted user on intercom: !output", array('!output' => $output));
    curl_close($curl);
  }
  catch(Exception $e) {
    watchdog_exception('intercomio', $e);
  }
}

/**
 * Return the javascript needed for intercom.io.
 *
 * I don't believe this can be done in a drupal_add_js call as
 * drupal doesn't support addding an 'id' attribute to the script tag.
 */
function _intercomio_get_script($account, $app_id) {
  $intercom_settings = array(
    'app_id' => $app_id,
    'user_id' => $account->uid,
    'email' => $account->mail,
    'created_at' => $account->created,
    'name' => format_username($account),
  );

  $custom_data = array();
  $custom_data += module_invoke_all('intercomio_custom_data', variable_get('intercomio_custom_data', array()), $account);
  if (!empty($custom_data)) {
    $intercom_settings['custom_data'] = $custom_data;
  }

  if (variable_get('intercomio_secure') && $secure_key = variable_get('intercomio_secure_key')) {
    $intercom_settings['user_hash'] = hash_hmac('sha256', $account->uid, $secure_key);
  }

  if ($inbox_type = variable_get('intercomio_inbox_type')) {
    if ($inbox_type == 'simple') {
      $intercom_settings['widget'] = array(
        'activator' => '#IntercomDefaultWidget',
      );
      if ($label = variable_get('intercomio_inbox_label')) {
        $intercom_settings['widget']['label'] = $label;
      }
    }
    elseif ($inbox_type == 'advanced') {
      $intercom_settings['widget'] = array(
        'activator' => '#IntercomDefaultWidget',
        'use_counter' => TRUE,
        'activator_html' => 'function (obj) { return obj.activator_html_functions.brackets(); }',
      );
    }
  }

  $output = "<script id=\"IntercomSettingsScriptTag\">
      var intercomSettings = " . drupal_json_encode($intercom_settings)  . "
    </script>
    <script>
      (function() {
        function async_load() {
          var s = document.createElement('script');
          s.type = 'text/javascript'; s.async = true;
          s.src = 'https://api.intercom.io/api/js/library.js';
          var x = document.getElementsByTagName('script')[0];
          x.parentNode.insertBefore(s, x);
        }
        if (window.attachEvent) {
          window.attachEvent('onload', async_load);
        } else {
          window.addEventListener('load', async_load, false);
        }
      })();
    </script>";
  return $output;
}

/**
 * Get event list
 *
 * @param string $events_type
 *  Events type to be loaded
 *
 * @return array
 */
function _intercomio_get_key_value_events($events_type) {
  $events = &drupal_static(__FUNCTION__ . '_' . $events_type);

  if ($events !== null) {
    return $events;
  }

  $events_raw = _intercomio_get_line_events($events_type);

  $events = array();
  foreach($events_raw as $index => $line) {
    $parts = explode('|', $line, 2);
    if (isset($parts[1])) {
      $events[$parts[0]][] = $parts[1];
    }
  }

  // Remove duplicates
  $events = array_map('array_unique', $events);

  return $events;
}

/**
 * Extract events saved as multiple lines
 *
 * @param $events_type
 *  Variable name used to save the events
 *
 * @return array
 */
function _intercomio_get_line_events($events_type) {
  $events_raw = explode("\n", variable_get("intercomio_{$events_type}_events", ''));
  $events_raw = array_map('trim', $events_raw); // get rid of \r in case of Windows line endings
  $events_raw = array_filter($events_raw); // remove empty lines
  return $events_raw;
}

/**
 * Track an event
 *
 * @param string $event_name
 */
function intercomio_track_event($event_name) {
  global $user;
  $access_token = variable_get('intercomio_access_token', '');

  $data = array(
    'event_name' => $event_name,
    'created_at' => time(),
    'user_id' => $user->uid,
  );

  $curl_options = array(
    CURLOPT_URL => 'https://api.intercom.io/events',
    CURLOPT_POST => TRUE,
    CURLOPT_TIMEOUT => 1, // do not more than 1 sec to connect
    CURLOPT_POSTFIELDS => json_encode($data),
    CURLOPT_HTTPHEADER => array('Content-Type: application/json', 'Authorization:Bearer ' . $access_token),
    CURLOPT_RETURNTRANSFER => TRUE,
  );

  try {
    $curl_handler = curl_init();
    curl_setopt_array($curl_handler, $curl_options);
    if (!curl_exec($curl_handler)) {
      $args = array(
        '@errno' => curl_errno($curl_handler),
        '@error' => curl_error($curl_handler),
      );
      watchdog('intercomio', 'Failed to sent Intercom.io event with error #@errno: @error', $args, WATCHDOG_ERROR);
    }
    curl_close($curl_handler);
  }
  catch(Exception $e) {
    watchdog_exception('intercomio', $e);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form().
 */
function intercomio_form_node_type_form_alter(&$form, &$form_state) {
  $form['intercomio'] = array(
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#title' => t('Intercom.io events'),
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  );

  $form['intercomio']['view_events'] = array(
    '#type' => 'textarea',
    '#title' => t('Full node view events'),
    '#description' => t('One per line. Tokens supported'),
    '#default_value' => variable_get('intercomio_' . $form['#node_type']->type . '_view_events', ''),

  );

  $form['intercomio']['view_events_tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('node'),
    '#global_types' => TRUE,
    '#click_insert' => TRUE,
  );

  $form['#submit'][] = 'intercomio_form_node_type_form_submit';
}

/**
 * Submit callback for node_type_form().
 */
function intercomio_form_node_type_form_submit($form, &$form_state) {
  $node_type = $form_state['values']['type'];
  $intercom_values = $form_state['values']['intercomio'];
  foreach($intercom_values as $name => $value) {
    variable_set('intercomio_' . $node_type . '_' . $name, $value);
  }
}